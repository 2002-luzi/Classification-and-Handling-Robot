<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RT106X.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RT106X.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Thu Aug 18 00:08:51 2022
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
child2_find_coor_UI &rArr; ACO_to_first &rArr; ant &rArr; calc_tag &rArr; __hardfp_sqrt
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[165]">LPUART_Deinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[165]">LPUART_Deinit</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8f]">ACMP1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[90]">ACMP2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[91]">ACMP3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[92]">ACMP4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[57]">ADC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[58]">ADC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8d]">ADC_ETC_ERROR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8a]">ADC_ETC_IRQ0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8b]">ADC_ETC_IRQ1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8c]">ADC_ETC_IRQ2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4b]">BEE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from common.o(.text.BusFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d6]">CAN1_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[38]">CAN1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d7]">CAN2_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[39]">CAN2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e7]">CAN3_DriverIRQHandler</a> from fsl_flexcan.o(.text.CAN3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ae]">CAN3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[73]">CCM_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[74]">CCM_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[27]">CORE_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3f]">CSI_IRQHandler</a> from isr.o(.text.CSI_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[45]">CSU_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[25]">CTI0_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[26]">CTI1_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[59]">DCDC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[46]">DCP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[47]">DCP_VMI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b5]">DMA0_DMA16_DriverIRQHandler</a> from fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[14]">DMA0_DMA16_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bf]">DMA10_DMA26_DriverIRQHandler</a> from fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1e]">DMA10_DMA26_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c0]">DMA11_DMA27_DriverIRQHandler</a> from fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1f]">DMA11_DMA27_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c1]">DMA12_DMA28_DriverIRQHandler</a> from fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[20]">DMA12_DMA28_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c2]">DMA13_DMA29_DriverIRQHandler</a> from fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[21]">DMA13_DMA29_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c3]">DMA14_DMA30_DriverIRQHandler</a> from fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[22]">DMA14_DMA30_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c4]">DMA15_DMA31_DriverIRQHandler</a> from fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[23]">DMA15_DMA31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b6]">DMA1_DMA17_DriverIRQHandler</a> from fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[15]">DMA1_DMA17_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b7]">DMA2_DMA18_DriverIRQHandler</a> from fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[16]">DMA2_DMA18_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b8]">DMA3_DMA19_DriverIRQHandler</a> from fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[17]">DMA3_DMA19_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b9]">DMA4_DMA20_DriverIRQHandler</a> from fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[18]">DMA4_DMA20_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ba]">DMA5_DMA21_DriverIRQHandler</a> from fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[19]">DMA5_DMA21_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bb]">DMA6_DMA22_DriverIRQHandler</a> from fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1a]">DMA6_DMA22_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bc]">DMA7_DMA23_DriverIRQHandler</a> from fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1b]">DMA7_DMA23_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[bd]">DMA8_DMA24_DriverIRQHandler</a> from fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1c]">DMA8_DMA24_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[be]">DMA9_DMA25_DriverIRQHandler</a> from fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[1d]">DMA9_DMA25_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c5]">DMA_ERROR_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[24]">DMA_ERROR_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from common.o(.text.DebugMon_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_flexcan.o(.data.s_flexcanIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 2 times from fsl_usdhc.o(.data.s_usdhcIsr)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[0]">DefaultISR</a> from startup_mimxrt1064.o(.text) referenced 81 times from startup_mimxrt1064.o(RESET)
 <LI><a href="#[95]">ENC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[96]">ENC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[97]">ENC3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[98]">ENC4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e6]">ENET2_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ad]">ENET2_1588_Timer_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e5]">ENET2_DriverIRQHandler</a> from fsl_enet.o(.text.ENET2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[ac]">ENET2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e4]">ENET_1588_Timer_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[87]">ENET_1588_Timer_IRQHandler</a> from fsl_enet.o(.text.ENET_1588_Timer_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e3]">ENET_DriverIRQHandler</a> from fsl_enet.o(.text.ENET_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[86]">ENET_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[72]">EWM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dd]">FLEXIO1_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[6e]">FLEXIO1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[de]">FLEXIO2_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[6f]">FLEXIO2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e8]">FLEXIO3_DriverIRQHandler</a> from fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[b0]">FLEXIO3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3a]">FLEXRAM_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[df]">FLEXSPI2_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[7f]">FLEXSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e0]">FLEXSPI_DriverIRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[80]">FLEXSPI_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[75]">GPC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[64]">GPIO1_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[65]">GPIO1_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5c]">GPIO1_INT0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5d]">GPIO1_INT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5e]">GPIO1_INT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5f]">GPIO1_INT3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[60]">GPIO1_INT4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[61]">GPIO1_INT5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[62]">GPIO1_INT6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[63]">GPIO1_INT7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[66]">GPIO2_Combined_0_15_IRQHandler</a> from isr.o(.text.GPIO2_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[67]">GPIO2_Combined_16_31_IRQHandler</a> from isr.o(.text.GPIO2_Combined_16_31_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[68]">GPIO3_Combined_0_15_IRQHandler</a> from fsl_sdmmc_host.o(.text.GPIO3_Combined_0_15_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[69]">GPIO3_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6a]">GPIO4_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6b]">GPIO4_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6c]">GPIO5_Combined_0_15_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[6d]">GPIO5_Combined_16_31_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b1]">GPIO6_7_8_9_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3d]">GPR_IRQ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[78]">GPT1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[79]">GPT2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ea]">GUI_refresh_timer2</a> from ips_refresh.o(.text.GUI_refresh_timer2) referenced 2 times from ips_refresh.o(.text.IPS_INIT)
 <LI><a href="#[c]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3b]">KPP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3e]">LCDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ce]">LPI2C1_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[30]">LPI2C1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cf]">LPI2C2_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[31]">LPI2C2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d0]">LPI2C3_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[32]">LPI2C3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d1]">LPI2C4_DriverIRQHandler</a> from fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[33]">LPI2C4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d2]">LPSPI1_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[34]">LPSPI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d3]">LPSPI2_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[35]">LPSPI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d4]">LPSPI3_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[36]">LPSPI3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d5]">LPSPI4_DriverIRQHandler</a> from fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[37]">LPSPI4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c6]">LPUART1_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[28]">LPUART1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c7]">LPUART2_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[29]">LPUART2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c8]">LPUART3_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART3_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2a]">LPUART3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[c9]">LPUART4_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART4_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2b]">LPUART4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ca]">LPUART5_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART5_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2c]">LPUART5_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cb]">LPUART6_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART6_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2d]">LPUART6_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cc]">LPUART7_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART7_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2e]">LPUART7_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[cd]">LPUART8_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART8_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[2f]">LPUART8_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ec]">LPUART_TransferHandleIRQ</a> from fsl_lpuart.o(.text.LPUART_TransferHandleIRQ) referenced 4 times from fsl_lpuart.o(.text.LPUART_TransferCreateHandle)
 <LI><a href="#[1]">Main_UI</a> from ips_refresh.o(.text.Main_UI) referenced 2 times from ips_refresh.o(.data.table)
 <LI><a href="#[2]">Main_menu_UI</a> from ips_refresh.o(.text.Main_menu_UI) referenced 6 times from ips_refresh.o(.data.table)
 <LI><a href="#[d]">MemManage_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from common.o(.text.NMI_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[8e]">PIT_IRQHandler</a> from isr.o(.text.PIT_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[51]">PMU_EVENT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7a]">PWM1_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7b]">PWM1_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7c]">PWM1_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7d]">PWM1_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[7e]">PWM1_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9d]">PWM2_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9e]">PWM2_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9f]">PWM2_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a0]">PWM2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a1]">PWM2_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a2]">PWM3_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a3]">PWM3_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a4]">PWM3_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a5]">PWM3_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a6]">PWM3_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a7]">PWM4_0_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a8]">PWM4_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a9]">PWM4_2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[aa]">PWM4_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[ab]">PWM4_FAULT_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[40]">PXP_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[71]">RTWDOG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[77]">Reserved115_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[93]">Reserved143_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[94]">Reserved144_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[af]">Reserved171_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[48]">Reserved68_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[52]">Reserved78_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5a]">Reserved86_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[5b]">Reserved87_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d8]">SAI1_DriverIRQHandler</a> from fsl_sai.o(.text.SAI1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4c]">SAI1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[d9]">SAI2_DriverIRQHandler</a> from fsl_sai.o(.text.SAI2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4d]">SAI2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[da]">SAI3_RX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_RX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4e]">SAI3_RX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[db]">SAI3_TX_DriverIRQHandler</a> from fsl_sai.o(.text.SAI3_TX_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[4f]">SAI3_TX_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[81]">SEMC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[4a]">SJC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[42]">SNVS_HP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[43]">SNVS_HP_WRAPPER_TZ_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[44]">SNVS_LP_WRAPPER_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[dc]">SPDIF_DriverIRQHandler</a> from fsl_spdif.o(.text.SPDIF_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[50]">SPDIF_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[76]">SRC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from common.o(.text.SVC_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b3]">SystemInit</a> from system_mimxrt1064.o(.text.SystemInit) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[53]">TEMP_LOW_HIGH_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[54]">TEMP_PANIC_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[99]">TMR1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9a]">TMR2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9b]">TMR3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[9c]">TMR4_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[49]">TRNG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[3c]">TSC_DIG_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[85]">USB_OTG1_IRQHandler</a> from zf_usb_cdc.o(.text.USB_OTG1_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[84]">USB_OTG2_IRQHandler</a> from zf_usb_cdc.o(.text.USB_OTG2_IRQHandler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[55]">USB_PHY1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[56]">USB_PHY2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e1]">USDHC1_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC1_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[82]">USDHC1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[e2]">USDHC2_DriverIRQHandler</a> from fsl_usdhc.o(.text.USDHC2_DriverIRQHandler) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[83]">USDHC2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from common.o(.text.UsageFault_Handler) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[70]">WDOG1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[41]">WDOG2_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[88]">XBAR1_IRQ_0_1_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[89]">XBAR1_IRQ_2_3_IRQHandler</a> from startup_mimxrt1064.o(.text) referenced from startup_mimxrt1064.o(RESET)
 <LI><a href="#[b4]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mimxrt1064.o(.text)
 <LI><a href="#[fb]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3]">child1_UI</a> from ips_refresh.o(.text.child1_UI) referenced 16 times from ips_refresh.o(.data.table)
 <LI><a href="#[4]">child1_change</a> from ips_refresh.o(.text.child1_change) referenced 16 times from ips_refresh.o(.data.table)
 <LI><a href="#[7]">child2_ant_UI</a> from ips_refresh.o(.text.child2_ant_UI) referenced 2 times from ips_refresh.o(.data.table)
 <LI><a href="#[6]">child2_find_coor_UI</a> from ips_refresh.o(.text.child2_find_coor_UI) referenced 2 times from ips_refresh.o(.data.table)
 <LI><a href="#[5]">child2_showimg</a> from ips_refresh.o(.text.child2_showimg) referenced 2 times from ips_refresh.o(.data.table)
 <LI><a href="#[8]">child3_UI</a> from ips_refresh.o(.text.child3_UI) referenced 8 times from ips_refresh.o(.data.table)
 <LI><a href="#[9]">child3_change</a> from ips_refresh.o(.text.child3_change) referenced 6 times from ips_refresh.o(.data.table)
 <LI><a href="#[102]">clear</a> from cmd.o(.text.clear) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[110]">cmd_free</a> from msh.o(.text.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[10f]">cmd_ps</a> from msh.o(.text.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[f5]">csi_isr</a> from seekfree_mt9v03x_csi.o(.text.csi_isr) referenced 2 times from seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
 <LI><a href="#[f4]">csi_mt9v03x_uart_callback</a> from seekfree_mt9v03x_csi.o(.text.csi_mt9v03x_uart_callback) referenced 2 times from seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
 <LI><a href="#[fa]">data_analysis</a> from more_uart.o(.text.data_analysis) referenced 2 times from more_uart.o(.text.uart8_mailbox)
 <LI><a href="#[ef]">example_uart1_callback</a> from board.o(.text.example_uart1_callback) referenced 2 times from board.o(.text.board_init)
 <LI><a href="#[ff]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[f0]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced 2 times from shell.o(.text.finsh_system_init)
 <LI><a href="#[101]">hello</a> from cmd.o(.text.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[e9]">icm_read_timer3</a> from icm.o(.text.icm_read_timer3) referenced 2 times from icm.o(.text.ICM_INIT)
 <LI><a href="#[eb]">ips_mb_recv</a> from ips_refresh.o(.text.ips_mb_recv) referenced 2 times from ips_refresh.o(.text.IPS_INIT)
 <LI><a href="#[10d]">list</a> from cmd.o(.text.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[106]">list_event</a> from cmd.o(.text.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[108]">list_mailbox</a> from cmd.o(.text.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[10a]">list_memheap</a> from cmd.o(.text.list_memheap) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[10b]">list_mempool</a> from cmd.o(.text.list_mempool) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[109]">list_msgqueue</a> from cmd.o(.text.list_msgqueue) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[107]">list_mutex</a> from cmd.o(.text.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[105]">list_sem</a> from cmd.o(.text.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[104]">list_thread</a> from cmd.o(.text.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[10c]">list_timer</a> from cmd.o(.text.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[b2]">main</a> from components.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f7]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rtthread_startup)
 <LI><a href="#[f1]">motorControl_timer1</a> from motor.o(.text.motorControl_timer1) referenced 2 times from motor.o(.text.motor_init)
 <LI><a href="#[10e]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[ed]">rt_thread_exit</a> from thread.o(.text.rt_thread_exit) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[f6]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[ee]">rt_thread_timeout</a> from thread.o(.text.rt_thread_timeout) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[fe]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[fd]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[100]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[fc]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[f3]">servo_ctrl</a> from motor.o(.text.servo_ctrl) referenced 2 times from motor.o(.text.motor_init)
 <LI><a href="#[f8]">uart8_callback</a> from more_uart.o(.text.uart8_callback) referenced 2 times from more_uart.o(.text.uart8_init)
 <LI><a href="#[f9]">uart8_mb_recv</a> from more_uart.o(.text.uart8_mb_recv) referenced 2 times from more_uart.o(.text.uart8_mailbox)
 <LI><a href="#[f2]">uart_trans</a> from motor.o(.text.uart_trans) referenced 2 times from motor.o(.text.motor_init)
 <LI><a href="#[103]">version</a> from cmd.o(.text.version) referenced 2 times from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b4]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[249]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[245]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[247]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[24b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[24c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[24d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[24e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA0_DMA16_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_DMA17_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA2_DMA18_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA3_DMA19_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA4_DMA20_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA5_DMA21_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA6_DMA22_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA7_DMA23_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA8_DMA24_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA9_DMA25_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA10_DMA26_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA11_DMA27_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA12_DMA28_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA13_DMA29_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA14_DMA30_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA15_DMA31_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPUART2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LPUART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LPUART4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LPUART5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPUART6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPUART7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LPI2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LPI2C2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LPI2C3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LPI2C4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPSPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>LPSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>LPSPI3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>LPSPI4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SAI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SAI3_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SAI3_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPDIF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FLEXIO1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>FLEXIO2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>FLEXSPI2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>FLEXSPI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ENET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>ENET2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>ENET2_1588_Timer_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>CAN3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>FLEXIO3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ACMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ADC_ETC_ERROR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ADC_ETC_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>ADC_ETC_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>ADC_ETC_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>BEE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CCM_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CCM_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CTI0_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CTI1_ERROR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DCP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DCP_VMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA_ERROR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 5]<UL><LI> fsl_flexcan.o(.data.s_flexcanIsr)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> fsl_usdhc.o(.data.s_usdhcIsr)
<LI> startup_mimxrt1064.o(RESET)
<LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>ENC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ENC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>ENC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>ENC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>ENET2_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>ENET_1588_Timer_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FLEXRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>FLEXSPI2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>FLEXSPI_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>GPIO6_7_8_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PMU_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PWM1_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PWM2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PWM2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>PWM2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>PWM2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>PWM2_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>PWM3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>PWM3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>PWM3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>PWM3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>PWM3_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>PWM4_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>PWM4_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>PWM4_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>PWM4_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>PWM4_FAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PXP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>RTWDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>Reserved115_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>Reserved143_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>Reserved144_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>Reserved171_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>Reserved68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Reserved78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SEMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SJC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SNVS_HP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SNVS_HP_WRAPPER_TZ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SNVS_LP_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TEMP_LOW_HIGH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TEMP_PANIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TSC_DIG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USB_PHY1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USB_PHY2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>XBAR1_IRQ_0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>XBAR1_IRQ_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mimxrt1064.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[246]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[24f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>SystemInit</STRONG> (Thumb, 908 bytes, Stack size 44 bytes, system_mimxrt1064.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[248]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mimxrt1064.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[250]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[251]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[252]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1d1]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1d2]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[20a]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[209]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[210]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[253]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12a]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
</UL>

<P><STRONG><a name="[254]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_rote_ctrl
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_tail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_right
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_left
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_tail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_right
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_left
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_similarity
</UL>

<P><STRONG><a name="[255]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_sprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_GetDefaultConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1a5]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
</UL>

<P><STRONG><a name="[1a2]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
</UL>

<P><STRONG><a name="[1ac]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1a7]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1a4]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
</UL>

<P><STRONG><a name="[1cf]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[118]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23f]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[260]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[261]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[122]"></a>ACO_to_R</STRONG> (Thumb, 560 bytes, Stack size 56 bytes, aco.o(.text.ACO_to_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ACO_to_R &rArr; make_path &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_analysis
</UL>

<P><STRONG><a name="[127]"></a>ACO_to_first</STRONG> (Thumb, 856 bytes, Stack size 160 bytes, aco.o(.text.ACO_to_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ACO_to_first &rArr; ant &rArr; calc_tag &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tag
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child2_find_coor_UI
</UL>

<P><STRONG><a name="[12c]"></a>ACO_to_next</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, aco.o(.text.ACO_to_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ACO_to_next &rArr; make_path &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_analysis
</UL>

<P><STRONG><a name="[12d]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 1568 bytes, Stack size 16 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOARD_BootClockRUN
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SwitchOsc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitRcOsc24M
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitExternalClk
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitArmPll
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitVideoPll
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitUsb2Pll
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitEnetPll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DeinitAudioPll
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[183]"></a>BOARD_ConfigMPU</STRONG> (Thumb, 688 bytes, Stack size 44 bytes, board.o(.text.BOARD_ConfigMPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BOARD_ConfigMPU
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[136]"></a>BOARD_DebugConsoleSrcFreq</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, board.o(.text.BOARD_DebugConsoleSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_DebugConsoleSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>CAN1_DriverIRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_flexcan.o(.text.CAN1_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>CAN2_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_flexcan.o(.text.CAN2_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>CAN3_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_flexcan.o(.text.CAN3_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>CLOCK_DeinitAudioPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitAudioPll))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[134]"></a>CLOCK_DeinitEnetPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitEnetPll))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[135]"></a>CLOCK_DeinitUsb2Pll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitUsb2Pll))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[133]"></a>CLOCK_DeinitVideoPll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_DeinitVideoPll))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[138]"></a>CLOCK_GetFreq</STRONG> (Thumb, 1830 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetSemcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[137]"></a>CLOCK_GetPllFreq</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPllFreq))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
</UL>

<P><STRONG><a name="[13a]"></a>CLOCK_GetSemcFreq</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetSemcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetSemcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPeriphClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[131]"></a>CLOCK_InitArmPll</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitArmPll))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12e]"></a>CLOCK_InitExternalClk</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitExternalClk))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[12f]"></a>CLOCK_InitRcOsc24M</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_InitRcOsc24M))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[130]"></a>CLOCK_SwitchOsc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SwitchOsc))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[13b]"></a>CSI_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_csi.o(.text.CSI_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_DriverIRQHandler &rArr; CSI_TransferHandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>CSI_GetDefaultConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_csi.o(.text.CSI_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[3f]"></a>CSI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(.text.CSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSI_IRQHandler &rArr; CSI_DriverIRQHandler &rArr; CSI_TransferHandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DriverIRQHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>CSI_Init</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, fsl_csi.o(.text.CSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CSI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[140]"></a>CSI_TransferCreateHandle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fsl_csi.o(.text.CSI_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CSI_TransferCreateHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[190]"></a>CSI_TransferGetFullBuffer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_csi.o(.text.CSI_TransferGetFullBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_get_full_buffer
</UL>

<P><STRONG><a name="[13c]"></a>CSI_TransferHandleIRQ</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, fsl_csi.o(.text.CSI_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CSI_TransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DriverIRQHandler
</UL>

<P><STRONG><a name="[197]"></a>CSI_TransferStart</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, fsl_csi.o(.text.CSI_TransferStart))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_start
</UL>

<P><STRONG><a name="[18e]"></a>CSI_TransferSubmitEmptyBuffer</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, fsl_csi.o(.text.CSI_TransferSubmitEmptyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSI_TransferSubmitEmptyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
</UL>

<P><STRONG><a name="[1ae]"></a>DCACHE_CleanInvalidateByRange</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, fsl_cache.o(.text.DCACHE_CleanInvalidateByRange))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
</UL>

<P><STRONG><a name="[b5]"></a>DMA0_DMA16_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA0_DMA16_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA0_DMA16_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>DMA10_DMA26_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA10_DMA26_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA10_DMA26_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>DMA11_DMA27_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA11_DMA27_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA11_DMA27_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>DMA12_DMA28_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA12_DMA28_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA12_DMA28_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>DMA13_DMA29_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA13_DMA29_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA13_DMA29_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>DMA14_DMA30_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA14_DMA30_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA14_DMA30_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>DMA15_DMA31_DriverIRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA15_DMA31_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA15_DMA31_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>DMA1_DMA17_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA1_DMA17_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_DMA17_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>DMA2_DMA18_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA2_DMA18_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_DMA18_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>DMA3_DMA19_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA3_DMA19_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA3_DMA19_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>DMA4_DMA20_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA4_DMA20_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA4_DMA20_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>DMA5_DMA21_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA5_DMA21_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA5_DMA21_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>DMA6_DMA22_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA6_DMA22_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA6_DMA22_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>DMA7_DMA23_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA7_DMA23_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA7_DMA23_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>DMA8_DMA24_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA8_DMA24_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA8_DMA24_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>DMA9_DMA25_DriverIRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fsl_edma.o(.text.DMA9_DMA25_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA9_DMA25_DriverIRQHandler &rArr; EDMA_HandleIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>DbgConsole_Init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EDMA_HandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DMA25_DriverIRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DMA24_DriverIRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DMA23_DriverIRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DMA22_DriverIRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DMA21_DriverIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DMA20_DriverIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DMA19_DriverIRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DMA18_DriverIRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DMA17_DriverIRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DMA31_DriverIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DMA30_DriverIRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DMA29_DriverIRQHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DMA28_DriverIRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DMA27_DriverIRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DMA26_DriverIRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DMA16_DriverIRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>ENET2_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_enet.o(.text.ENET2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENET2_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fsl_enet.o(.text.ENET_1588_Timer_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENET_1588_Timer_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>ENET_CommonFrame0IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, fsl_enet.o(.text.ENET_CommonFrame0IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENET_CommonFrame0IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_DriverIRQHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET2_DriverIRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>ENET_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_enet.o(.text.ENET_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENET_DriverIRQHandler &rArr; ENET_CommonFrame0IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_CommonFrame0IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>FLEXIO1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_flexio.o(.text.FLEXIO1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>FLEXIO2_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_flexio.o(.text.FLEXIO2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO2_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>FLEXIO3_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fsl_flexio.o(.text.FLEXIO3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXIO3_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>FLEXIO_CAMERA_ClearStatusFlags</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_flexio_camera.o(.text.FLEXIO_CAMERA_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>

<P><STRONG><a name="[66]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, isr.o(.text.GPIO2_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO2_Combined_0_15_IRQHandler &rArr; scc8660_vsync &rArr; dma_restart &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_vsync
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isr.o(.text.GPIO2_Combined_16_31_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO2_Combined_16_31_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, fsl_sdmmc_host.o(.text.GPIO3_Combined_0_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO3_Combined_0_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMCEVENT_Notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>GPIO_PinInit</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[ea]"></a>GUI_refresh_timer2</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ips_refresh.o(.text.GUI_refresh_timer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GUI_refresh_timer2 &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.text.IPS_INIT)
</UL>
<P><STRONG><a name="[14c]"></a>HAL_UartInit</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lpuart_adapter.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[14f]"></a>ICM_INIT</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, icm.o(.text.ICM_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ICM_INIT &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[155]"></a>IPS_INIT</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ips_refresh.o(.text.IPS_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IPS_INIT &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ce]"></a>LPI2C1_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C1_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>LPI2C2_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C2_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>LPI2C3_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C3_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>LPI2C4_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_lpi2c.o(.text.LPI2C4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPI2C4_DriverIRQHandler &rArr; LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_SlaveTransferHandleIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>LPI2C_MasterTransferHandleIRQ</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, fsl_lpi2c.o(.text.LPI2C_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_MasterTransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>LPI2C_SlaveTransferHandleIRQ</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, fsl_lpi2c.o(.text.LPI2C_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPI2C_SlaveTransferHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C4_DriverIRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C3_DriverIRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C2_DriverIRQHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPI2C1_DriverIRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>LPSPI1_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI1_DriverIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>LPSPI2_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI2_DriverIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>LPSPI3_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI3_DriverIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>LPSPI4_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI4_DriverIRQHandler &rArr; LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SlaveTransferHandleIRQ
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>LPSPI_MasterGetDefaultConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI_MasterGetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[163]"></a>LPSPI_MasterInit</STRONG> (Thumb, 890 bytes, Stack size 48 bytes, fsl_lpspi.o(.text.LPSPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPSPI_MasterInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[228]"></a>LPSPI_MasterTransferBlocking</STRONG> (Thumb, 1094 bytes, Stack size 52 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPSPI_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>

<P><STRONG><a name="[161]"></a>LPSPI_MasterTransferHandleIRQ</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI_MasterTransferHandleIRQ &rArr; LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[227]"></a>LPSPI_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_lpspi.o(.text.LPSPI_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[160]"></a>LPSPI_SlaveTransferHandleIRQ</STRONG> (Thumb, 728 bytes, Stack size 16 bytes, fsl_lpspi.o(.text.LPSPI_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPSPI_SlaveTransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI4_DriverIRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI3_DriverIRQHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI2_DriverIRQHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>LPUART1_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART1_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>LPUART2_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART2_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>LPUART3_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART3_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>LPUART4_DriverIRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART4_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>LPUART5_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART5_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>LPUART6_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART6_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>LPUART7_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART7_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>LPUART8_DriverIRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPUART8_DriverIRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>LPUART_Deinit</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_Deinit))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[22f]"></a>LPUART_DisableInterrupts</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_DisableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[22e]"></a>LPUART_EnableInterrupts</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[14d]"></a>LPUART_GetDefaultConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_lpuart.o(.text.LPUART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[14e]"></a>LPUART_Init</STRONG> (Thumb, 874 bytes, Stack size 64 bytes, fsl_lpuart.o(.text.LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LPUART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[166]"></a>LPUART_TransferCreateHandle</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, fsl_lpuart.o(.text.LPUART_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART_TransferCreateHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
</UL>

<P><STRONG><a name="[ec]"></a>LPUART_TransferHandleIRQ</STRONG> (Thumb, 1316 bytes, Stack size 48 bytes, fsl_lpuart.o(.text.LPUART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPUART_TransferHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_lpuart.o(.text.LPUART_TransferCreateHandle)
</UL>
<P><STRONG><a name="[22b]"></a>LPUART_WriteBlocking</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_lpuart.o(.text.LPUART_WriteBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>

<P><STRONG><a name="[1]"></a>Main_UI</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ips_refresh.o(.text.Main_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Main_UI &rArr; ips114_showstr &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[2]"></a>Main_menu_UI</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ips_refresh.o(.text.Main_menu_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Main_menu_UI &rArr; flash_page_program
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_page
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_program
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>PIT_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, isr.o(.text.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>PWM_Deinit</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, fsl_pwm.o(.text.PWM_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[16b]"></a>PWM_GetDefaultConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fsl_pwm.o(.text.PWM_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1e8]"></a>PWM_Init</STRONG> (Thumb, 404 bytes, Stack size 28 bytes, fsl_pwm.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[16c]"></a>PWM_SetupPwm</STRONG> (Thumb, 600 bytes, Stack size 96 bytes, fsl_pwm.o(.text.PWM_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PWM_SetupPwm &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[16d]"></a>PWM_UpdatePwmDutycycle</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, fsl_pwm.o(.text.PWM_UpdatePwmDutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PWM_UpdatePwmDutycycle &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
</UL>

<P><STRONG><a name="[1ec]"></a>QTMR_Deinit</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, fsl_qtmr.o(.text.QTMR_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[16e]"></a>QTMR_GetDefaultConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QTMR_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[1eb]"></a>QTMR_Init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, fsl_qtmr.o(.text.QTMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTMR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[d8]"></a>SAI1_DriverIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SAI1_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>SAI2_DriverIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fsl_sai.o(.text.SAI2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SAI2_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>SAI3_RX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI3_RX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAI3_RX_DriverIRQHandler &rArr; SAI_TransferRxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferRxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>SAI3_TX_DriverIRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_sai.o(.text.SAI3_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAI3_TX_DriverIRQHandler &rArr; SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_TransferTxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[16f]"></a>SAI_TransferRxHandleIRQ</STRONG> (Thumb, 596 bytes, Stack size 64 bytes, fsl_sai.o(.text.SAI_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAI_TransferRxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_RX_DriverIRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[170]"></a>SAI_TransferTxHandleIRQ</STRONG> (Thumb, 634 bytes, Stack size 80 bytes, fsl_sai.o(.text.SAI_TransferTxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SAI_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI3_TX_DriverIRQHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI2_DriverIRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI1_DriverIRQHandler
</UL>

<P><STRONG><a name="[149]"></a>SDMMCEVENT_Notify</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(.text.SDMMCEVENT_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>SPDIF_DriverIRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPDIF_DriverIRQHandler &rArr; SPDIF_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferTxHandleIRQ
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_TransferRxHandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>SPDIF_TransferRxHandleIRQ</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_TransferRxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPDIF_TransferRxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_DriverIRQHandler
</UL>

<P><STRONG><a name="[171]"></a>SPDIF_TransferTxHandleIRQ</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, fsl_spdif.o(.text.SPDIF_TransferTxHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPDIF_TransferTxHandleIRQ &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPDIF_DriverIRQHandler
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>SerialManager_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[145]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SerialManager_OpenReadHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[144]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[173]"></a>Serial_UartInit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serial_port_uart.o(.text.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_tick_handler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>USB_DeviceEhciIsrFunction</STRONG> (Thumb, 1050 bytes, Stack size 64 bytes, usb_device_ehci.o(.text.USB_DeviceEhciIsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG2_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG1_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>USB_DeviceNotificationTrigger</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceNotificationTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciCancelControlPipe
</UL>

<P><STRONG><a name="[85]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zf_usb_cdc.o(.text.USB_OTG1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_OTG1_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, zf_usb_cdc.o(.text.USB_OTG2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_OTG2_IRQHandler &rArr; USB_DeviceEhciIsrFunction &rArr; USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>USDHC1_DriverIRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC1_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>USDHC2_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_usdhc.o(.text.USDHC2_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mimxrt1064.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>WDOG_GetDefaultConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_wdog.o(.text.WDOG_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDOG_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdog_init
</UL>

<P><STRONG><a name="[17b]"></a>WDOG_Init</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, fsl_wdog.o(.text.WDOG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdog_init
</UL>

<P><STRONG><a name="[1e3]"></a>WDOG_Refresh</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_wdog.o(.text.WDOG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[17a]"></a>Wdog_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, watchdog.o(.text.Wdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Wdog_init &rArr; WDOG_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[208]"></a>__rt_ffs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[129]"></a>ant</STRONG> (Thumb, 6680 bytes, Stack size 504 bytes, aco.o(.text.ant))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ant &rArr; calc_tag &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_tag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
</UL>

<P><STRONG><a name="[1c1]"></a>arm_cos_f32</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, arm_cos_f32.o(.text.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_edge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bar
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_back
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionControl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_out
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_in
</UL>

<P><STRONG><a name="[1dc]"></a>arm_mult_f32</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, arm_mult_f32.o(.text.arm_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1c0]"></a>arm_sin_f32</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, arm_sin_f32.o(.text.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_edge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bar
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_back
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionControl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_out
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_in
</UL>

<P><STRONG><a name="[182]"></a>board_init</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, board.o(.text.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = board_init &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFreq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ConfigMPU
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[187]"></a>calc_dis</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aco.o(.text.calc_dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calc_dis &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[188]"></a>calc_dist</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motionplanning.o(.text.calc_dist))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calc_dist &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
</UL>

<P><STRONG><a name="[181]"></a>calc_tag</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, aco.o(.text.calc_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = calc_tag &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tag
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant
</UL>

<P><STRONG><a name="[3]"></a>child1_UI</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, ips_refresh.o(.text.child1_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = child1_UI &rArr; ips114_showfloat &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showfloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[4]"></a>child1_change</STRONG> (Thumb, 952 bytes, Stack size 16 bytes, ips_refresh.o(.text.child1_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = child1_change &rArr; ips114_showfloat &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showfloat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[7]"></a>child2_ant_UI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ips_refresh.o(.text.child2_ant_UI))
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[6]"></a>child2_find_coor_UI</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ips_refresh.o(.text.child2_find_coor_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = child2_find_coor_UI &rArr; ACO_to_first &rArr; ant &rArr; calc_tag &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[5]"></a>child2_showimg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ips_refresh.o(.text.child2_showimg))
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[8]"></a>child3_UI</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, ips_refresh.o(.text.child3_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = child3_UI &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showint16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[9]"></a>child3_change</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, ips_refresh.o(.text.child3_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = child3_change &rArr; ips114_showint16 &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showint16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.data.table)
</UL>
<P><STRONG><a name="[110]"></a>cmd_free</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msh.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cmd_free &rArr; list_memheap &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[10f]"></a>cmd_ps</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, msh.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[18d]"></a>csi_add_empty_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, zf_csi.o(.text.csi_add_empty_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = csi_add_empty_buffer &rArr; CSI_TransferSubmitEmptyBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferSubmitEmptyBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
</UL>

<P><STRONG><a name="[18f]"></a>csi_get_full_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, zf_csi.o(.text.csi_get_full_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = csi_get_full_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferGetFullBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
</UL>

<P><STRONG><a name="[191]"></a>csi_init</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, zf_csi.o(.text.csi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = csi_init &rArr; CSI_TransferCreateHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferCreateHandle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GetDefaultConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[192]"></a>csi_iomuxc</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, zf_csi.o(.text.csi_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = csi_iomuxc &rArr; iomuxc_pinconf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
</UL>

<P><STRONG><a name="[f5]"></a>csi_isr</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, seekfree_mt9v03x_csi.o(.text.csi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = csi_isr &rArr; rt_sem_release &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_get_full_buffer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
</UL>
<P><STRONG><a name="[f4]"></a>csi_mt9v03x_uart_callback</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, seekfree_mt9v03x_csi.o(.text.csi_mt9v03x_uart_callback))
<BR>[Address Reference Count : 1]<UL><LI> seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init)
</UL>
<P><STRONG><a name="[196]"></a>csi_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, zf_csi.o(.text.csi_start))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_TransferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[fa]"></a>data_analysis</STRONG> (Thumb, 1056 bytes, Stack size 8 bytes, more_uart.o(.text.data_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = data_analysis &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_next
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_R
</UL>
<BR>[Address Reference Count : 1]<UL><LI> more_uart.o(.text.uart8_mailbox)
</UL>
<P><STRONG><a name="[199]"></a>dma_restart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, zf_camera.o(.text.dma_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_restart &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scc8660_vsync
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
</UL>

<P><STRONG><a name="[19b]"></a>encoder_get</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, encoder.o(.text.encoder_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = encoder_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_get
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[19e]"></a>encoder_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, encoder.o(.text.encoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = encoder_init &rArr; qtimer_quad_init &rArr; QTMR_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ef]"></a>example_uart1_callback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, board.o(.text.example_uart1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = example_uart1_callback &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text.board_init)
</UL>
<P><STRONG><a name="[ff]"></a>finsh_system_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[f0]"></a>finsh_thread_entry</STRONG> (Thumb, 1540 bytes, Stack size 0 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = finsh_thread_entry &rArr; rt_hw_console_getchar &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[168]"></a>flash_check</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, zf_flash.o(.text.flash_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanInvalidateByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_menu_UI
</UL>

<P><STRONG><a name="[169]"></a>flash_erase_sector</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, zf_flash.o(.text.flash_erase_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_api_flexspi_nor_flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_menu_UI
</UL>

<P><STRONG><a name="[158]"></a>flash_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, zf_flash.o(.text.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_api_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_api_flexspi_nor_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
</UL>

<P><STRONG><a name="[16a]"></a>flash_page_program</STRONG> (Thumb, 238 bytes, Stack size 280 bytes, zf_flash.o(.text.flash_page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = flash_page_program
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_api_flexspi_nor_flash_page_program
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_menu_UI
</UL>

<P><STRONG><a name="[159]"></a>flash_read_page</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, zf_flash.o(.text.flash_read_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_read_page
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCACHE_CleanInvalidateByRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_menu_UI
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
</UL>

<P><STRONG><a name="[1b3]"></a>get_Theta</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, motionplanning.o(.text.get_Theta))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_Theta &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_edge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bar
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_back
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_out
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_in
</UL>

<P><STRONG><a name="[1b4]"></a>get_center</STRONG> (Thumb, 2084 bytes, Stack size 88 bytes, pic_pick.o(.text.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = get_center &rArr; show_red_corner1 &rArr; ips114_drawpoint &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_dis
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_red_corner1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
</UL>

<P><STRONG><a name="[1b6]"></a>get_config</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, seekfree_mt9v03x.o(.text.get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[1b8]"></a>get_icm20602_accdata_spi</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, seekfree_icm20602.o(.text.get_icm20602_accdata_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_icm20602_accdata_spi &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_timer3
</UL>

<P><STRONG><a name="[153]"></a>get_icm20602_gyro_spi</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, seekfree_icm20602.o(.text.get_icm20602_gyro_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_icm20602_gyro_spi &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_read_timer3
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INIT
</UL>

<P><STRONG><a name="[1ba]"></a>get_pic</STRONG> (Thumb, 1312 bytes, Stack size 64 bytes, pic_pick.o(.text.get_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = get_pic &rArr; get_center &rArr; show_red_corner1 &rArr; ips114_drawpoint &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_displayimage032_zoomT
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_similarity
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1bd]"></a>get_similarity</STRONG> (Thumb, 1896 bytes, Stack size 80 bytes, pic_pick.o(.text.get_similarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_similarity
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
</UL>

<P><STRONG><a name="[1bf]"></a>go_in</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, motor.o(.text.go_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = go_in &rArr; get_Theta &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1c2]"></a>go_out</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, motor.o(.text.go_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = go_out &rArr; get_Theta &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1c3]"></a>go_point</STRONG> (Thumb, 840 bytes, Stack size 56 bytes, motionplanning.o(.text.go_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = go_point &rArr; __hardfp_atan &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_cal
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionControl
</UL>

<P><STRONG><a name="[14a]"></a>gpio_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, zf_gpio.o(.text.gpio_get))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_refresh_timer2
</UL>

<P><STRONG><a name="[157]"></a>gpio_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, zf_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
</UL>

<P><STRONG><a name="[18b]"></a>gpio_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, zf_gpio.o(.text.gpio_set))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_drawpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child2_find_coor_UI
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_tail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_right
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_left
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_tail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_right
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_left
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[101]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[150]"></a>icm20602_init_spi</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, seekfree_icm20602.o(.text.icm20602_init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = icm20602_init_spi &rArr; systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INIT
</UL>

<P><STRONG><a name="[e9]"></a>icm_read_timer3</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, icm.o(.text.icm_read_timer3))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = icm_read_timer3 &rArr; get_icm20602_gyro_spi &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_accdata_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm.o(.text.ICM_INIT)
</UL>
<P><STRONG><a name="[128]"></a>init_tag</STRONG> (Thumb, 1780 bytes, Stack size 96 bytes, aco.o(.text.init_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = init_tag &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_tag
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
</UL>

<P><STRONG><a name="[194]"></a>iomuxc_pinconf</STRONG> (Thumb, 10154 bytes, Stack size 8 bytes, zf_iomuxc.o(.text.iomuxc_pinconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_iomuxc
</UL>

<P><STRONG><a name="[1c9]"></a>ips114_clear</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, seekfree_ips114_spi.o(.text.ips114_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ips114_clear &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips_mb_recv
</UL>

<P><STRONG><a name="[1bc]"></a>ips114_displayimage032_zoomT</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, ips_refresh.o(.text.ips114_displayimage032_zoomT))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ips114_displayimage032_zoomT &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
</UL>

<P><STRONG><a name="[1cc]"></a>ips114_drawpoint</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, seekfree_ips114_spi.o(.text.ips114_drawpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ips114_drawpoint &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_red_corner1
</UL>

<P><STRONG><a name="[156]"></a>ips114_init</STRONG> (Thumb, 2342 bytes, Stack size 56 bytes, seekfree_ips114_spi.o(.text.ips114_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ips114_init &rArr; systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
</UL>

<P><STRONG><a name="[1ca]"></a>ips114_set_region</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, seekfree_ips114_spi.o(.text.ips114_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_drawpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_displayimage032_zoomT
</UL>

<P><STRONG><a name="[1cd]"></a>ips114_showchar</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, seekfree_ips114_spi.o(.text.ips114_showchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showstr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showint16
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showfloat
</UL>

<P><STRONG><a name="[18a]"></a>ips114_showfloat</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, seekfree_ips114_spi.o(.text.ips114_showfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ips114_showfloat &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zf_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child1_change
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child1_UI
</UL>

<P><STRONG><a name="[18c]"></a>ips114_showint16</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, seekfree_ips114_spi.o(.text.ips114_showint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ips114_showint16 &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child3_change
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child3_UI
</UL>

<P><STRONG><a name="[167]"></a>ips114_showstr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, seekfree_ips114_spi.o(.text.ips114_showstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ips114_showstr &rArr; ips114_showchar &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child3_change
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child3_UI
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child1_change
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child1_UI
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_menu_UI
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_UI
</UL>

<P><STRONG><a name="[1cb]"></a>ips114_writedata_16bit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, seekfree_ips114_spi.o(.text.ips114_writedata_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ips114_writedata_16bit &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_displayimage032_zoomT
</UL>

<P><STRONG><a name="[eb]"></a>ips_mb_recv</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, ips_refresh.o(.text.ips_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ips_mb_recv &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ips_refresh.o(.text.IPS_INIT)
</UL>
<P><STRONG><a name="[10d]"></a>list</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cmd.o(.text.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[106]"></a>list_event</STRONG> (Thumb, 476 bytes, Stack size 88 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = list_event &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[108]"></a>list_mailbox</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, cmd.o(.text.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = list_mailbox &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10a]"></a>list_memheap</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, cmd.o(.text.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = list_memheap &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10b]"></a>list_mempool</STRONG> (Thumb, 492 bytes, Stack size 96 bytes, cmd.o(.text.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = list_mempool &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[109]"></a>list_msgqueue</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = list_msgqueue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[107]"></a>list_mutex</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[105]"></a>list_sem</STRONG> (Thumb, 520 bytes, Stack size 88 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = list_sem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[104]"></a>list_thread</STRONG> (Thumb, 508 bytes, Stack size 216 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10c]"></a>list_timer</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1d4]"></a>$Super$$main</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = $Super$$main &rArr; uart8_init &rArr; uart8_mailbox &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdog_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[f7]"></a>main_thread_entry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; uart8_init &rArr; uart8_mailbox &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rtthread_startup)
</UL>
<P><STRONG><a name="[126]"></a>make_path</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, aco.o(.text.make_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = make_path &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_next
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_R
</UL>

<P><STRONG><a name="[1db]"></a>motionControl</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, motionplanning.o(.text.motionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = motionControl &rArr; go_point &rArr; __hardfp_atan &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[f1]"></a>motorControl_timer1</STRONG> (Thumb, 1142 bytes, Stack size 56 bytes, motor.o(.text.motorControl_timer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = motorControl_timer1 &rArr; to_pic &rArr; rt_kprintf8 &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Refresh
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_edge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bar
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_back
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_cal
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionControl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_out
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_in
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mult_f32
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_init)
</UL>
<P><STRONG><a name="[1d8]"></a>motor_init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, motor.o(.text.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = motor_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1aa]"></a>msh_auto_complete</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = msh_auto_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1ab]"></a>msh_exec</STRONG> (Thumb, 968 bytes, Stack size 88 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = msh_exec &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[10e]"></a>msh_help</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1a3]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(.text.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
</UL>

<P><STRONG><a name="[1d6]"></a>mt9v03x_csi_init</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, seekfree_mt9v03x_csi.o(.text.mt9v03x_csi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mt9v03x_csi_init &rArr; set_config &rArr; systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_start
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_add_empty_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[147]"></a>mt9v03x_vsync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, seekfree_mt9v03x.o(.text.mt9v03x_vsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mt9v03x_vsync &rArr; dma_restart &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>pid_cal</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, pid.o(.text.pid_cal))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1d5]"></a>pid_init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, pid.o(.text.pid_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e0]"></a>protect_back</STRONG> (Thumb, 436 bytes, Stack size 72 bytes, motor.o(.text.protect_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = protect_back &rArr; get_Theta &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1df]"></a>pwm_duty</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, zf_pwm.o(.text.pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pwm_duty &rArr; PWM_UpdatePwmDutycycle &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_UpdatePwmDutycycle
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_rote_ctrl
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_tail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_right
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_left
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_tail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_right
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_left
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1e4]"></a>pwm_init</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, zf_pwm.o(.text.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pwm_init &rArr; PWM_SetupPwm &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetupPwm
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_GetDefaultConfig
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Deinit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[1e7]"></a>pwm_iomuxc</STRONG> (Thumb, 620 bytes, Stack size 0 bytes, zf_pwm.o(.text.pwm_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pwm_iomuxc &rArr; iomuxc_pinconf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1ea]"></a>qtimer_iomuxc</STRONG> (Thumb, 526 bytes, Stack size 8 bytes, zf_qtimer.o(.text.qtimer_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qtimer_iomuxc &rArr; iomuxc_pinconf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_quad_init
</UL>

<P><STRONG><a name="[19d]"></a>qtimer_quad_clear</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, zf_qtimer.o(.text.qtimer_quad_clear))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_get
</UL>

<P><STRONG><a name="[19c]"></a>qtimer_quad_get</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, zf_qtimer.o(.text.qtimer_quad_get))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_get
</UL>

<P><STRONG><a name="[19f]"></a>qtimer_quad_init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, zf_qtimer.o(.text.qtimer_quad_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = qtimer_quad_init &rArr; QTMR_GetDefaultConfig &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_GetDefaultConfig
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTMR_Deinit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qtimer_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_init
</UL>

<P><STRONG><a name="[1af]"></a>rom_api_flexspi_nor_flash_erase</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, zf_rom_api.o(.text.rom_api_flexspi_nor_flash_erase))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>

<P><STRONG><a name="[1b2]"></a>rom_api_flexspi_nor_flash_page_program</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, zf_rom_api.o(.text.rom_api_flexspi_nor_flash_page_program))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_program
</UL>

<P><STRONG><a name="[1b1]"></a>rom_api_flexspi_nor_get_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, zf_rom_api.o(.text.rom_api_flexspi_nor_get_config))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[1b0]"></a>rom_api_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, zf_rom_api.o(.text.rom_api_init))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[17f]"></a>rt_assert_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, kservice.o(.text.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1a0]"></a>rt_calloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, memheap.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1f5]"></a>rt_components_board_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1ee]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1ef]"></a>rt_exit_critical</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1f1]"></a>rt_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memheap.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1f3]"></a>rt_hw_board_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_hw_board_init &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1a6]"></a>rt_hw_console_getchar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, board.o(.text.rt_hw_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_hw_console_getchar &rArr; rt_mb_recv &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1f6]"></a>rt_hw_console_output</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_console_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[111]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 796 bytes, Stack size 8 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[17e]"></a>rt_hw_stack_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[13e]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART8_DriverIRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART7_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_DriverIRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_DriverIRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_DriverIRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_DriverIRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[13f]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART8_DriverIRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART7_DriverIRQHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART6_DriverIRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART5_DriverIRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART4_DriverIRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART3_DriverIRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART2_DriverIRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_DriverIRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_16_31_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>rt_kprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_menu_UI
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_first
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_trans
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1fb]"></a>rt_kprintf8</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, more_uart.o(.text.rt_kprintf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_kprintf8 &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
</UL>

<P><STRONG><a name="[1ed]"></a>rt_malloc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, memheap.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[15a]"></a>rt_mb_create</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ipc.o(.text.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_mailbox
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
</UL>

<P><STRONG><a name="[198]"></a>rt_mb_recv</STRONG> (Thumb, 670 bytes, Stack size 56 bytes, ipc.o(.text.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mb_recv &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_getchar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips_mb_recv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_mb_recv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_analysis
</UL>

<P><STRONG><a name="[14b]"></a>rt_mb_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;example_uart1_callback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_refresh_timer2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_mb_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_callback
</UL>

<P><STRONG><a name="[203]"></a>rt_mb_send_wait</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, ipc.o(.text.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[1fc]"></a>rt_memheap_alloc</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, memheap.o(.text.rt_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1f2]"></a>rt_memheap_free</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, memheap.o(.text.rt_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1a9]"></a>rt_memmove</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, kservice.o(.text.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[17d]"></a>rt_memset</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1fe]"></a>rt_object_allocate</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1ff]"></a>rt_object_delete</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[205]"></a>rt_object_detach</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1d0]"></a>rt_object_get_information</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1fd]"></a>rt_object_get_type</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, object.o(.text.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[206]"></a>rt_object_init</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[207]"></a>rt_object_is_systemobject</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1f0]"></a>rt_schedule</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[20b]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[20c]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>

<P><STRONG><a name="[15d]"></a>rt_sem_create</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
</UL>

<P><STRONG><a name="[1a1]"></a>rt_sem_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[195]"></a>rt_sem_release</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_sem_release &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_isr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>

<P><STRONG><a name="[1da]"></a>rt_sem_take</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[204]"></a>rt_set_errno</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kservice.o(.text.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>

<P><STRONG><a name="[20d]"></a>rt_show_version</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[20e]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_sprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[1e5]"></a>rt_strncpy</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[1f4]"></a>rt_system_heap_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, memheap.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[21b]"></a>rt_system_scheduler_init</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[20f]"></a>rt_system_scheduler_start</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[21a]"></a>rt_system_timer_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[21c]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15b]"></a>rt_thread_create</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_mailbox
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[ed]"></a>rt_thread_exit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[212]"></a>rt_thread_idle_excute</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[213]"></a>rt_thread_idle_init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[214]"></a>rt_thread_init</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[152]"></a>rt_thread_mdelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child3_UI
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;child2_find_coor_UI
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_trans
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_rote_ctrl
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_tail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_right
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_left
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_tail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_right
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_left
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INIT
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[200]"></a>rt_thread_resume</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[1f8]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[216]"></a>rt_thread_sleep</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[15c]"></a>rt_thread_startup</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_mailbox
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[201]"></a>rt_thread_suspend</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[ee]"></a>rt_thread_timeout</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, thread.o(.text.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[215]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[1d3]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1bb]"></a>rt_tick_get_millisecond</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_trans
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
</UL>

<P><STRONG><a name="[174]"></a>rt_tick_increase</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[218]"></a>rt_timer_check</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[202]"></a>rt_timer_control</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[151]"></a>rt_timer_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INIT
</UL>

<P><STRONG><a name="[211]"></a>rt_timer_detach</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_timer_detach &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[180]"></a>rt_timer_init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[154]"></a>rt_timer_start</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPS_INIT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_INIT
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[217]"></a>rt_timer_stop</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[1fa]"></a>rt_vsnprintf</STRONG> (Thumb, 1804 bytes, Stack size 64 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[121]"></a>rtthread_startup</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>scc8660_vsync</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, seekfree_scc8660.o(.text.scc8660_vsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scc8660_vsync &rArr; dma_restart &rArr; FLEXIO_CAMERA_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Combined_0_15_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>sdmmc_tick_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_sdmmc_event.o(.text.sdmmc_tick_handler))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f3]"></a>servo_ctrl</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, motor.o(.text.servo_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = servo_ctrl &rArr; servo_put_tail &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_rote_ctrl
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_reset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_tail
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_right
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_put_left
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_get
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_tail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_right
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_drop_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_init)
</UL>
<P><STRONG><a name="[225]"></a>servo_drop_left</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, servo.o(.text.servo_drop_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = servo_drop_left &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[221]"></a>servo_drop_right</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, servo.o(.text.servo_drop_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = servo_drop_right &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[224]"></a>servo_drop_tail</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, servo.o(.text.servo_drop_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = servo_drop_tail &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[21e]"></a>servo_get</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, servo.o(.text.servo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = servo_get &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[1d9]"></a>servo_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, servo.o(.text.servo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = servo_init &rArr; pwm_init &rArr; PWM_SetupPwm &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[222]"></a>servo_put_left</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, servo.o(.text.servo_put_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = servo_put_left &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[220]"></a>servo_put_right</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, servo.o(.text.servo_put_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = servo_put_right &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[21f]"></a>servo_put_tail</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, servo.o(.text.servo_put_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = servo_put_tail &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[21d]"></a>servo_reset</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, servo.o(.text.servo_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = servo_reset &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[223]"></a>servo_rote_ctrl</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, servo.o(.text.servo_rote_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = servo_rote_ctrl &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_duty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_ctrl
</UL>

<P><STRONG><a name="[1e6]"></a>set_config</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, seekfree_mt9v03x.o(.text.set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = set_config &rArr; systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
</UL>

<P><STRONG><a name="[1b5]"></a>show_red_corner1</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, pic_pick.o(.text.show_red_corner1))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = show_red_corner1 &rArr; ips114_drawpoint &rArr; ips114_set_region &rArr; spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_drawpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>

<P><STRONG><a name="[1c7]"></a>spi_init</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, zf_spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_init &rArr; LPSPI_MasterInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterGetDefaultConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[226]"></a>spi_iomuxc</STRONG> (Thumb, 540 bytes, Stack size 16 bytes, zf_spi.o(.text.spi_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_iomuxc &rArr; iomuxc_pinconf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1b9]"></a>spi_mosi</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, zf_spi.o(.text.spi_mosi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spi_mosi &rArr; LPSPI_MasterTransferBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_writedata_16bit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showchar
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_set_region
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_drawpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_accdata_spi
</UL>

<P><STRONG><a name="[1c6]"></a>systick_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, zf_systick.o(.text.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = systick_delay_ms &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[1e1]"></a>to_bar</STRONG> (Thumb, 516 bytes, Stack size 72 bytes, motor.o(.text.to_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = to_bar &rArr; get_Theta &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1e2]"></a>to_edge</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, motor.o(.text.to_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = to_edge &rArr; get_Theta &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1dd]"></a>to_pic</STRONG> (Thumb, 888 bytes, Stack size 88 bytes, motor.o(.text.to_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = to_pic &rArr; rt_kprintf8 &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf8
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_dist
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[1de]"></a>to_pic2</STRONG> (Thumb, 884 bytes, Stack size 88 bytes, motor.o(.text.to_pic2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = to_pic2 &rArr; __hardfp_atan &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_dist
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorControl_timer1
</UL>

<P><STRONG><a name="[f8]"></a>uart8_callback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, more_uart.o(.text.uart8_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = uart8_callback &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> more_uart.o(.text.uart8_init)
</UL>
<P><STRONG><a name="[1d7]"></a>uart8_init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, more_uart.o(.text.uart8_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = uart8_init &rArr; uart8_mailbox &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_handle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_mailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[229]"></a>uart8_mailbox</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, more_uart.o(.text.uart8_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = uart8_mailbox &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_init
</UL>

<P><STRONG><a name="[f9]"></a>uart8_mb_recv</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, more_uart.o(.text.uart8_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = uart8_mb_recv &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> more_uart.o(.text.uart8_mailbox)
</UL>
<P><STRONG><a name="[184]"></a>uart_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, zf_uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_init &rArr; LPUART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetDefaultConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Deinit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DebugConsoleSrcFreq
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iomuxc
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_init
</UL>

<P><STRONG><a name="[22a]"></a>uart_iomuxc</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, zf_uart.o(.text.uart_iomuxc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_iomuxc &rArr; iomuxc_pinconf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iomuxc_pinconf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1b7]"></a>uart_putbuff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, zf_uart.o(.text.uart_putbuff))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_trans
</UL>

<P><STRONG><a name="[1f7]"></a>uart_putchar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, zf_uart.o(.text.uart_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf8
</UL>

<P><STRONG><a name="[22c]"></a>uart_putfloat</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, zf_uart.o(.text.uart_putfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = uart_putfloat &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_trans
</UL>

<P><STRONG><a name="[186]"></a>uart_rx_irq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, zf_uart.o(.text.uart_rx_irq))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_EnableInterrupts
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_init
</UL>

<P><STRONG><a name="[185]"></a>uart_set_handle</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, zf_uart.o(.text.uart_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_set_handle &rArr; LPUART_TransferCreateHandle &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_TransferCreateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_csi_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8_init
</UL>

<P><STRONG><a name="[f2]"></a>uart_trans</STRONG> (Thumb, 724 bytes, Stack size 24 bytes, motor.o(.text.uart_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = uart_trans &rArr; uart_putfloat &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putfloat
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_init)
</UL>
<P><STRONG><a name="[103]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1ce]"></a>zf_sprintf</STRONG> (Thumb, 3268 bytes, Stack size 128 bytes, seekfree_printf.o(.text.zf_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = zf_sprintf &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips114_showfloat
</UL>

<P><STRONG><a name="[231]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[264]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[265]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[266]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[22d]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putfloat
</UL>

<P><STRONG><a name="[234]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[124]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_next
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_R
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic2
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pic
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[230]"></a>__hardfp_atan2</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_trans
</UL>

<P><STRONG><a name="[123]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putfloat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_next
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_R
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_edge
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bar
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Theta
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pic
</UL>

<P><STRONG><a name="[1c8]"></a>__hardfp_pow</STRONG> (Thumb, 2108 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putfloat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tag
</UL>

<P><STRONG><a name="[125]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tag
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_tag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_dis
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_next
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACO_to_R
</UL>

<P><STRONG><a name="[189]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_point
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_dist
</UL>

<P><STRONG><a name="[237]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[23b]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[233]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[238]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[23e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[23c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[235]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[23a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[239]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[236]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[23d]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[139]"></a>CLOCK_GetPeriphClkFreq</STRONG> (Thumb, 798 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPeriphClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetSemcFreq
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[164]"></a>LPSPI_MasterTransferFillUpTxFifo</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, fsl_lpspi.o(.text.LPSPI_MasterTransferFillUpTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[176]"></a>USB_DeviceEhciCancelControlPipe</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, usb_device_ehci.o(.text.USB_DeviceEhciCancelControlPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceEhciCancelControlPipe &rArr; USB_DeviceNotificationTrigger
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceEhciIsrFunction
</UL>

<P><STRONG><a name="[fe]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[fd]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[100]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[fc]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[f6]"></a>rt_thread_idle_entry</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[219]"></a>print_number</STRONG> (Thumb, 1196 bytes, Stack size 80 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[17c]"></a>_rt_thread_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, thread.o(.text._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[102]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1ad]"></a>shell_handle_history</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[240]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[232]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[243]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[242]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fb]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
